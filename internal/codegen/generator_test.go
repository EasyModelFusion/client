package codegen

import (
	"github.com/easy-model-fusion/client/test"
	"testing"
)

func TestPythonCodeGenerator_Generate(t *testing.T) {
	gen := NewPythonCodeGenerator(true)
	code, err := gen.Generate(&File{
		Name: "test.py",
		HeaderComments: []string{
			"Code generated by EMF",
			"DO NOT EDIT!",
		},
		Imports: []Import{
			{
				What: []ImportWhat{
					{
						Name: "os",
					},
				},
			},
			{
				What: []ImportWhat{
					{
						Name: "List",
					},
				},
				From: "typing",
			},
		},
		Functions: []*Function{
			{
				Name: "main",
				Params: []Parameter{
					{
						Name: "args",
						Type: "List[str]",
					},
				},
				Body: []Statement{
					&Assignment{
						Variable: "a",
						Value:    "1",
					},
				},
			},
		},
		Classes: []*Class{
			{
				Name: "Test",
				Fields: []Field{
					{
						Name: "a",
						Type: "int",
					},
				},
				Methods: []*Function{
					{
						Name: "test",
						Params: []Parameter{
							{
								Name: "self",
							},
						},
						Body: []Statement{
							&Assignment{
								Variable: "self.a",
								Value:    "1",
							},
						},
					},
				},
			},
		},
	})

	if err != nil {
		t.Error(err)
	}

	t.Logf("\n%s", code)

	code, err = gen.Generate(&File{
		Name: "",
		Classes: []*Class{
			{
				Name: "",
			},
		},
	})

	if err == nil {
		t.Error("expected error")
	}

}

func TestPythonCodeGenerator_reset(t *testing.T) {
	cg := NewPythonCodeGenerator(true)
	cg.sb.WriteString("blabla")
	cg.currentLine = 2
	cg.currentColumn = 3
	cg.indentLevel = 5
	cg.reset()
	test.AssertEqual(t, cg.sb.String(), "", "StringBuilder should be reset")
	test.AssertEqual(t, cg.currentLine, 1)
	test.AssertEqual(t, cg.currentColumn, 0)
	test.AssertEqual(t, cg.indentLevel, 0)
}

func TestPythonCodeGenerator_NewPythonCodeGenerator(t *testing.T) {
	cg := NewPythonCodeGenerator(true)
	test.AssertEqual(t, cg.currentLine, 1)
	test.AssertEqual(t, cg.currentColumn, 0)
	test.AssertEqual(t, cg.indentLevel, 0)
	test.AssertEqual(t, cg.indentFourSpaces, true)
	test.AssertEqual(t, cg.sb.String(), "")
}

func TestPythonCodeGenerator_append(t *testing.T) {
	cg := NewPythonCodeGenerator(true)
	cg.append("test")
	test.AssertEqual(t, cg.sb.String(), "test")

	test.AssertEqual(t, cg.currentLine, 1)
	test.AssertEqual(t, cg.currentColumn, len("test"))

	cg.append("test\n")

	test.AssertEqual(t, cg.currentLine, 2)
	test.AssertEqual(t, cg.currentColumn, 0)
	test.AssertEqual(t, cg.sb.String(), "testtest\n")
}

func TestPythonCodeGenerator_appendIndented(t *testing.T) {
	cg := NewPythonCodeGenerator(true)

	// test with indentLevel = 0
	test.AssertEqual(t, cg.indentLevel, 0)
	cg.appendIndented("test")
	test.AssertEqual(t, cg.sb.String(), "test")

	test.AssertEqual(t, cg.currentLine, 1)
	test.AssertEqual(t, cg.currentColumn, len("test"))

	cg.appendIndented("test\n")

	test.AssertEqual(t, cg.currentLine, 2)
	test.AssertEqual(t, cg.currentColumn, 0)
	test.AssertEqual(t, cg.sb.String(), "testtest\n")

	// test with indentLevel = 1
	cg.up()
	test.AssertEqual(t, cg.indentLevel, 1)
	cg.appendIndented("test")
	test.AssertEqual(t, cg.sb.String(), "testtest\n    test")
	test.AssertEqual(t, cg.currentLine, 2)
	test.AssertEqual(t, cg.currentColumn, len("    test"))

	cg.up()

	cg.appendIndented("test\n")
	test.AssertEqual(t, cg.sb.String(), "testtest\n    test        test\n")
	test.AssertEqual(t, cg.currentLine, 3)
	test.AssertEqual(t, cg.currentColumn, 0)

	// test with indentFourSpaces = false
	cg = NewPythonCodeGenerator(false)
	cg.appendIndented("test")
	test.AssertEqual(t, cg.sb.String(), "test")
	test.AssertEqual(t, cg.currentLine, 1)
	test.AssertEqual(t, cg.currentColumn, len("test"))

	// test with indentLevel = 1
	cg.up()

	test.AssertEqual(t, cg.indentLevel, 1)
	cg.appendIndented("test\n")

	test.AssertEqual(t, cg.currentLine, 2)
	test.AssertEqual(t, cg.currentColumn, 0)
	test.AssertEqual(t, cg.sb.String(), "test        test\n")

	// test with indentLevel = 2
	cg.up()

	test.AssertEqual(t, cg.indentLevel, 2)
	cg.appendIndented("test")

	test.AssertEqual(t, cg.sb.String(), "test        test\n                test")
	test.AssertEqual(t, cg.currentLine, 2)
	test.AssertEqual(t, cg.currentColumn, len("                test"))
}

func TestPythonCodeGenerator_up(t *testing.T) {
	cg := NewPythonCodeGenerator(true)
	cg.up()
	test.AssertEqual(t, cg.indentLevel, 1)
	cg.up()
	test.AssertEqual(t, cg.indentLevel, 2)
}

func TestPythonCodeGenerator_down(t *testing.T) {
	cg := NewPythonCodeGenerator(true)
	cg.down()
	test.AssertEqual(t, cg.indentLevel, 0)
	cg.down()
	test.AssertEqual(t, cg.indentLevel, 0)
}

func TestPythonCodeGenerator_newLine(t *testing.T) {
	cg := NewPythonCodeGenerator(true)
	cg.newLine()
	test.AssertEqual(t, cg.currentLine, 2)
	test.AssertEqual(t, cg.currentColumn, 0)
	test.AssertEqual(t, cg.sb.String(), "\n")
}

func TestPythonCodeGenerator_VisitClass(t *testing.T) {
	cg := NewPythonCodeGenerator(true)

	class := &Class{
		Name: "",
	}

	err := cg.VisitClass(class)
	if err == nil {
		t.Error("expected error")
		t.FailNow()
	}

	class = &Class{
		Name:   "test",
		Extend: "test",
	}

	test.AssertEqual(t, cg.VisitClass(class), nil)

	cg.sb.Reset()

	class = &Class{
		Name: "Test",
		Fields: []Field{
			{
				Name: "a",
				Type: "int",
			},
		},
		Methods: []*Function{
			{
				Name: "test",
				Params: []Parameter{
					{
						Name: "self",
					},
				},
				Body: []Statement{
					&Assignment{
						Variable: "self.a",
						Value:    "1",
					},
				},
			},
		},
	}

	err = cg.VisitClass(class)
	if err != nil {
		t.Error(err)
		t.FailNow()
	}

	test.AssertEqual(t, cg.sb.String(), "class Test:\n    a: int\n\n    def test(self):\n        self.a = 1\n")

	t.Logf("\n%s", cg.sb.String())
}
