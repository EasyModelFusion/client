package model

import (
	"fmt"
	"github.com/easy-model-fusion/emf-cli/internal/codegen"
	"github.com/easy-model-fusion/emf-cli/pkg/huggingface"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"strings"
)

var generationExcludedCharacters = []string{"-", "/", "."}

// GetFormattedModelName format the model name in CapsWord start with "Model"
func (m *Model) GetFormattedModelName() string {
	name := cases.Title(language.English, cases.Compact).String(m.Name)

	// Remove special characters
	for _, specialCharacter := range generationExcludedCharacters {
		name = strings.ReplaceAll(name, specialCharacter, "")
	}

	// Check if first letter is a number
	if strings.Contains("0123456789", string(name[0])) {
		name = "Model" + name
	}

	return name
}

// GetSDKClassNameWithModule return the sdk model for the given model
func (m *Model) GetSDKClassNameWithModule() string {
	switch m.Module {
	case huggingface.DIFFUSERS:
		return huggingface.SDKModelDiffusers
	case huggingface.TRANSFORMERS:
		return huggingface.SDKModelTransformers
	default:
		return ""
	}
}

// GetHuggingFaceClassImport Get hugging face class for the import
func (m *Model) GetHuggingFaceClassImport() string {
	switch m.Module {
	case huggingface.DIFFUSERS:
		return m.Class
	case huggingface.TRANSFORMERS:
		return fmt.Sprintf("%s, %s", m.Class, m.Tokenizers[0].Class)
	default:
		return ""
	}
}

// GetModuleAutoPipelineClassName return the auto pipeline for the given model
func (m *Model) GetModuleAutoPipelineClassName() string {
	switch m.Module {
	case huggingface.DIFFUSERS:
		return huggingface.AutoDiffusers
	case huggingface.TRANSFORMERS:
		return huggingface.AutoTransformers
	default:
		return ""
	}
}

// GenFile generates a single python file for the given model
func (m *Model) GenFile() *codegen.File {
	return &codegen.File{
		Name: m.GetFormattedModelName() + ".py",
		HeaderComments: []string{
			"Code generated by EMF",
			"DO NOT EDIT!",
		},
		Imports: m.GenImports(),
		Classes: []*codegen.Class{
			m.GenClass(),
		},
	}
}

// GenImports generate the imports for the given model
func (m *Model) GenImports() []codegen.Import {
	return []codegen.Import{
		{
			What: []codegen.ImportWhat{
				{
					Name: m.GetSDKClassNameWithModule(),
				},
			},
			From: "sdk.models",
		},
		{
			What: []codegen.ImportWhat{
				{
					Name: "Devices",
				},
			},
			From: "sdk.options",
		},
		{
			What: []codegen.ImportWhat{
				{
					Name: m.GetHuggingFaceClassImport(),
				},
			},
			From: string(m.Module),
		},
	}
}

// GenInitParamsWithModule generate the init params for the given model
func (m *Model) GenInitParamsWithModule() []codegen.Parameter {
	switch m.Module {
	case huggingface.DIFFUSERS:
		return []codegen.Parameter{
			{
				Name: "self",
			},
			{
				Name: "**kwargs",
			}}

	case huggingface.TRANSFORMERS:
		return []codegen.Parameter{
			{
				Name: "self",
			}}

	default:
		return []codegen.Parameter{}
	}
}

// GenSuperInitParamsWithModule generate the init params for the super class
func (m *Model) GenSuperInitParamsWithModule() []codegen.FunctionCallParameter {

	switch m.Module {
	case huggingface.DIFFUSERS:
		return []codegen.FunctionCallParameter{
			{
				Name:  "model_name",
				Value: "\"" + m.Name + "\"",
			},
			{
				Name:  "model_path",
				Value: "\"" + m.Path + "\"",
			},
			{
				Name:  "model_class",
				Value: m.Class,
			},
			{
				Name:  "device",
				Value: "Devices.GPU",
			},
			{
				Value: "**kwargs",
			}}

	case huggingface.TRANSFORMERS:
		params := []codegen.FunctionCallParameter{
			{
				Name:  "model_name",
				Value: "\"" + m.Name + "\"",
			},
			{
				Name:  "model_path",
				Value: "\"" + m.Path + "\"",
			},
			{
				Name:  "task",
				Value: "\"" + string(m.PipelineTag) + "\"",
			},
			{
				Name:  "model_class",
				Value: m.Class,
			},
			{
				Name:  "device",
				Value: "Devices.GPU",
			}}

		if len(m.Tokenizers) > 0 {
			params = append(params, codegen.FunctionCallParameter{
				Name:  "tokenizer_path",
				Value: "\"" + m.Tokenizers[0].Path + "\"",
			})
			params = append(params, codegen.FunctionCallParameter{
				Name:  "tokenizer_class",
				Value: m.Tokenizers[0].Class,
			})
		}
		return params

	default:
		return []codegen.FunctionCallParameter{}
	}
}

func (m *Model) GenClass() *codegen.Class {
	return &codegen.Class{
		Name:   m.GetFormattedModelName(),
		Extend: m.GetSDKClassNameWithModule(),
		Methods: []*codegen.Function{
			{
				Name:   "__init__",
				Params: m.GenInitParamsWithModule(),
				Body: []codegen.Statement{
					&codegen.FunctionCallStmt{
						FunctionCall: codegen.FunctionCall{
							Name:   "super().__init__",
							Params: m.GenSuperInitParamsWithModule(),
						},
					},
				},
			},
		},
	}
}
