package model

import (
	"github.com/easy-model-fusion/emf-cli/internal/codegen"
	"github.com/easy-model-fusion/emf-cli/pkg/huggingface"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"strings"
)

type Model struct {
	Name            string
	Path            string
	Module          huggingface.Module
	Class           string
	Tokenizers      []Tokenizer
	PipelineTag     huggingface.PipelineTag
	Source          string
	AddToBinaryFile bool
	IsDownloaded    bool
	Version         string
}

type Tokenizer struct {
	Path  string
	Class string
}

// Sources
const (
	HUGGING_FACE = "hugging_face"
	CUSTOM       = "custom"
)

// GetFormattedModelName format the model name in CapsWord
func (m *Model) GetFormattedModelName() string {
	return strings.ReplaceAll(strings.ReplaceAll(
		cases.Title(language.English, cases.Compact).String(m.Name),
		"-", ""),
		"/", "")
}

// GenFile generates a single python file for the given model
func (m *Model) GenFile() *codegen.File {
	return &codegen.File{
		Name: m.GetFormattedModelName() + ".py",
		HeaderComments: []string{
			"Code generated by EMF",
			"DO NOT EDIT!",
		},
		Imports: m.GenImports(),
		Classes: []*codegen.Class{
			m.GenClass(),
		},
	}
}

// GetPipelineTagAbstractClassName returns the abstract class name for the given model
func (m *Model) GetPipelineTagAbstractClassName() string {
	switch m.PipelineTag {
	case huggingface.TextToImage:
		return "ModelTextToImage"
	case huggingface.TextGeneration:
		return "ModelTextToText"
	default:
		return ""
	}
}

// GetModuleAutoPipelineClassName return the auto pipeline for the given model
func (m *Model) GetModuleAutoPipelineClassName() string {
	switch m.Module {
	case huggingface.DIFFUSERS:
		return huggingface.AutoDiffusers
	case huggingface.TRANSFORMERS:
		return huggingface.AutoTransformers
	default:
		return ""
	}
}

// GenImports generate the imports for the given model
func (m *Model) GenImports() []codegen.Import {
	return []codegen.Import{
		{
			What: []codegen.ImportWhat{
				{
					Name: m.GetPipelineTagAbstractClassName(),
				},
			},
			From: "sdk.models",
		},
		{
			What: []codegen.ImportWhat{
				{
					Name: m.Class,
				},
			},
			From: string(m.Module),
		},
		{
			What: []codegen.ImportWhat{
				{
					Name: "torch",
				},
			},
		},
	}
}

func (m *Model) GenClass() *codegen.Class {
	return &codegen.Class{
		Name:   m.GetFormattedModelName(),
		Extend: m.GetPipelineTagAbstractClassName(),
		Fields: []codegen.Field{
			{
				Name: "pipeline",
				Type: m.Class,
			},
		},
		Statements: []codegen.Statement{
			&codegen.AssignmentStmt{
				Variable:    "model_name",
				Type:        "str",
				StringValue: "\"" + m.Name + "\"",
			},
		},
		Methods: []*codegen.Function{
			{
				Name: "__init__",
				Params: []codegen.Parameter{
					{
						Name: "self",
					},
				},
				Body: []codegen.Statement{
					&codegen.FunctionCallStmt{
						FunctionCall: codegen.FunctionCall{
							Name: "super().__init__",
							Params: []codegen.FunctionCallParameter{
								{
									Name:  "model_name",
									Value: "\"" + m.Name + "\"",
								},
								{
									Name:  "model_path",
									Value: "\"" + m.Path + "\"",
								},
							},
						},
					},
				},
			},
			{
				Name: "create_pipeline",
				Params: []codegen.Parameter{
					{
						Name: "self",
					},
				},
				Body: []codegen.Statement{
					&codegen.IfStmt{
						Condition: "self.loaded",
						Body: []codegen.Statement{
							&codegen.ReturnStmt{},
						},
					},
					&codegen.AssignmentStmt{
						Variable: "self.pipeline",
						FunctionCallValue: &codegen.FunctionCall{
							Name: m.GetModuleAutoPipelineClassName() + ".from_pretrained",
							Params: []codegen.FunctionCallParameter{
								{
									Name:  "pretrained_model_name_or_path",
									Value: "self.model_path",
								},
								{
									Name:  "torch_dtype",
									Value: "torch.float16",
								},
								{
									Name:  "use_safetensors",
									Value: "True",
								},
								{
									Name:  "add_watermarker",
									Value: "False",
								},
								{
									Name:  "variant",
									Value: "\"fp16\"",
								},
							},
						},
					},
				},
			},
		},
	}
}
